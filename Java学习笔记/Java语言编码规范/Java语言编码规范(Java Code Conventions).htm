<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0055)http://www.huihoo.org/code/java_code_conventions.html -->
<HTML><HEAD><TITLE>Huihoo.org - Java语言编码规范(Java Code Conventions)</TITLE>
<META content="text/html; charset=gb2312" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 9.00.8112.16455"></HEAD>
<BODY bgColor=#ffffff><!--开始头部-->
<TABLE border=0 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD vAlign=top align=left><A href="http://www.huihoo.org/index.html"><IMG 
      border=0 alt="Huihoo.org - Open Enterprise Foundation" align=left 
      src="Java语言编码规范(Java%20Code%20Conventions)_files/huihoo.org.jpg"></A> 
  </TD></TR></TBODY></TABLE><!--结束头部--><!--开始中部-->
<TABLE border=0 cellSpacing=0 cellPadding=3 width="100%" align=center>
  <TBODY>
  <TR width="100%">
    <TD width="1%"></TD><!--开始正文-->
    <TD width="98%">
      <HR SIZE=1 width="98%" noShade>

      <CENTER>
      <H4>Java语言编码规范(Java Code Conventions)</CENTER>
      <TABLE align=center>
        <TBODY>
        <TR>
          <TD>
            <SCRIPT type=text/javascript><!--
google_ad_client = "pub-2627642070897863";
/* org-728x90, 08-12-22 */
google_ad_slot = "1171197320";
google_ad_width = 728;
google_ad_height = 90;
//-->
</SCRIPT>

            <SCRIPT type=text/javascript 
            src="Java语言编码规范(Java%20Code%20Conventions)_files/show_ads.js">
</SCRIPT>
          </TD></TR></TBODY></TABLE>
      <TABLE><!--目录-->
        <TBODY>
        <TR align=left colspan="3">
          <TD width="10%"></TD>
          <TD vAlign=top>
            <TABLE class=middletext border=1 cellPadding=5 width="100%">
              <TBODY>
              <TR>
                <TD width=60>　<B>名称</B></TD>
                <TD>Java语言编码规范(Java Code Conventions)</TD></TR>
              <TR>
                <TD>　<B>译者</B></TD>
                <TD>晨光（Morning）</TD></TR>
              <TR>
                <TD>　<B>简介</B></TD>
                <TD>本文档讲述了Java语言的编码规范，较之陈世忠先生《c++编码规范》的浩繁详尽，此文当属短小精悍了。而其中所列之各项条款，从编码风格，到注意事项，不单只Java，对于其他语言，也都很有借鉴意义。因为简短，所以易记，大家不妨将此作为handbook，常备案头，逐一对验。</TD></TR>
              <TR>
                <TD>　<B>声明</B></TD>
                <TD>如需复制、传播，请附上本声明，谢谢。<BR>原文出处：http://java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html，<BR>译文出处：http://morningspace.51.net/，moyingzz@etang.com 
                </TD></TR>
              <TR>
                <TD colSpan=2>
                  <P>　<B>目录</B></P><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#1">1 
                  介绍</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#11">1.1 
                    为什么要有编码规范</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#12">1.2 
                    版权声明</A> </LI></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#2">2 
                  文件名</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#21">2.1 
                    文件后缀</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#22">2.2 
                    常用文件名</A> </LI></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#3">3 
                  文件组织</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#31">3.1 
                    Java源文件</A> 
                    <UL>
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#311">3.1.1 
                      开头注释</A> 
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#312">3.1.2 
                      包和引入语句</A> 
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#313">3.1.3 
                      类和接口声明</A> </LI></UL></LI></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#4">4 
                  缩进排版</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#41">4.1 
                    行长度</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#42">4.2 
                    换行</A> </LI></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#5">5 
                  注释</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#51">5.1 
                    实现注释的格式</A> 
                    <UL>
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#511">5.1.1 
                      块注释</A> 
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#512">5.1.2 
                      单行注释</A> 
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#513">5.1.3 
                      尾端注释</A> 
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#514">5.1.4 
                      行末注释</A> </LI></UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#52">5.2 
                    文挡注释</A> </LI></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#6">6 
                  声明</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#61">6.1 
                    每行声明变量的数量</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#62">6.2 
                    初始化</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#63">6.3 
                    布局</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#64">6.4 
                    类和接口的声明</A> </LI></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#7">7 
                  语句</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#71">7.1 
                    简单语句</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#72">7.2 
                    复合语句</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#73">7.3 
                    返回语句</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#74">7.4 
                    if，if-else，if else-if else语句</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#75">7.5 
                    for语句</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#76">7.6 
                    while语句</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#77">7.7 
                    do-while语句</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#78">7.8 
                    switch语句</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#79">7.9 
                    try-catch语句</A> </LI></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#8">8 
                  空白</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#81">8.1 
                    空行</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#82">8.2 
                    空格</A> </LI></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#9">9 
                  命名规范</A> 
                  <UL></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#a">10 
                  编程惯例</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#a1">10.1 
                    提供对实例以及类变量的访问控制</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#a2">10.2 
                    引用类变量和类方法</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#a3">10.3 
                    常量</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#a4">10.4 
                    变量赋值</A> 
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#a5">10.5 
                    其它惯例</A> 
                    <UL>
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#a51">10.5.1 
                      圆括号</A> 
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#a52">10.5.2 
                      返回值</A> 
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#a53">10.5.3 
                      条件运算符"?"前的表达式"?"前的表达式</A> 
                      <LI><A 
                      href="http://www.huihoo.org/code/java_code_conventions.html#a54">10.5.4 
                      特殊注释</A> </LI></UL></LI></UL><A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#b">11 
                  代码范例</A> 
                  <UL>
                    <LI><A 
                    href="http://www.huihoo.org/code/java_code_conventions.html#b1">11.1 
                    Java源文件范例</A> </LI></UL></TD></TR></TBODY></TABLE></TD>
          <TD width="10%"></TD></TR><!--内容-->
        <TR align=left colspan="3">
          <TD width="10%"></TD>
          <TD vAlign=top>
            <P class=middletitle><A name=1>1 介绍(Introduction)</P>
            <P class=middletitle><A name=11>1.1 为什么要有编码规范(Why Have Code 
            Conventions)</P>
            <P>编码规范对于程序员而言尤为重要，有以下几个原因：</P>
            <P>- 一个软件的生命周期中，80%的花费在于维护<BR>- 
            几乎没有任何一个软件，在其整个生命周期中，均由最初的开发人员来维护<BR>- 
            编码规范可以改善软件的可读性，可以让程序员尽快而彻底地理解新的代码<BR>- 
            如果你将源码作为产品发布，就需要确任它是否被很好的打包并且清晰无误，一如你已构建的其它任何产品 </P>
            <P>为了执行规范，每个软件开发人员必须一致遵守编码规范。每个人。</P>
            <P class=middletitle><A name=12>1.2 版权声明(Acknowledgments)</P>
            <P>本文档反映的是Sun MicroSystems公司，Java语言规范中的编码标准部分。主要贡献者包括：Peter 
            King，Patrick Naughton，Mike DeMoney，Jonni Kanerva，Kathy 
            Walrath以及Scott Hommel。</P>
            <P>本文档现由Scott Hommel维护，有关评论意见请发至shommel@eng.sun.com</P>
            <P class=middletitle><A name=2>2 文件名(File Names)</P>
            <P>这部分列出了常用的文件名及其后缀。</P>
            <P class=middletitle><A name=21>2.1 文件后缀(File Suffixes)</P>
            <P>Java程序使用下列文件后缀：</P>
            <P>
            <TABLE border=1>
              <TBODY>
              <TR>
                <TD>文件类别</TD>
                <TD>文件后缀</TD></TR>
              <TR>
                <TD>Java源文件</TD>
                <TD>.java</TD></TR>
              <TR>
                <TD>Java字节码文件</TD>
                <TD>.class</TD></TR></TBODY></TABLE></P>
            <P class=middletitle><A name=22>2.2 常用文件名(Common File Names)</P>
            <P>常用的文件名包括：</P>
            <P>
            <TABLE border=1>
              <TBODY>
              <TR>
                <TD>文件名</TD>
                <TD>用途</TD></TR>
              <TR>
                <TD>GNUmakefile</TD>
                <TD>makefiles的首选文件名。我们采用gnumake来创建（build）软件。</TD></TR>
              <TR>
                <TD>README</TD>
                <TD>概述特定目录下所含内容的文件的首选文件名</TD></TR></TBODY></TABLE></P>
            <P class=middletitle><A name=3>3 文件组织(File Organization)</P>
            <P>一个文件由被空行分割而成的段落以及标识每个段落的可选注释共同组成。超过2000行的程序难以阅读，应该尽量避免。"Java源文件范例"提供了一个布局合理的Java程序范例。</P>
            <P class=middletitle><A name=31>3.1 Java源文件(Java Source Files)</P>
            <P>每个Java源文件都包含一个单一的公共类或接口。若私有类和接口与一个公共类相关联，可以将它们和公共类放入同一个源文件。公共类必须是这个文件中的第一个类或接口。</P>
            <P>Java源文件还遵循以下规则：</P>
            <P>- 开头注释（参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#311">开头注释</A>"）<BR>- 
            包和引入语句（参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#312">包和引入语句</A>"）<BR>- 
            类和接口声明（参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#313">类和接口声明</A>"） 
            </P>
            <P class=middletitle><A name=311>3.1.1 开头注释(Beginning Comments)</P>
            <P>所有的源文件都应该在开头有一个C语言风格的注释，其中列出类名、版本信息、日期和版权声明：</P>
            <P><PRE>  /*
   * Classname
   *
   * Version information
   *
   * Date
   *
   * Copyright notice
   */
	  </PRE>
            <P></P>
            <P class=middletitle><A name=312>3.1.2 包和引入语句(Package and Import 
            Statements)</P>
            <P>在多数Java源文件中，第一个非注释行是包语句。在它之后可以跟引入语句。例如：</P>
            <P><PRE>  package java.awt;

  import java.awt.peer.CanvasPeer;
	  </PRE>
            <P></P>
            <P class=middletitle><A name=313>3.1.3 类和接口声明(Class and Interface 
            Declarations)</P>
            <P>下表描述了类和接口声明的各个部分以及它们出现的先后次序。参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#b1">Java源文件范例</A>"中一个包含注释的例子。</P>
            <P>
            <TABLE border=1>
              <TBODY>
              <TR>
                <TD>&nbsp;</TD>
                <TD>类/接口声明的各部分</TD>
                <TD>注解</TD></TR>
              <TR>
                <TD>1</TD>
                <TD>类/接口文档注释(/**……*/)</TD>
                <TD>该注释中所需包含的信息，参见"<A 
                  href="http://www.huihoo.org/code/java_code_conventions.html#52">文档注释</A>"</TD></TR>
              <TR>
                <TD>2</TD>
                <TD>类或接口的声明</TD>
                <TD>&nbsp;</TD></TR>
              <TR>
                <TD>3</TD>
                <TD>类/接口实现的注释(/*……*/)如果有必要的话</TD>
                <TD>该注释应包含任何有关整个类或接口的信息，而这些信息又不适合作为类/接口文档注释。</TD></TR>
              <TR>
                <TD>4</TD>
                <TD>类的(静态)变量</TD>
                <TD>首先是类的公共变量，随后是保护变量，再后是包一级别的变量(没有访问修饰符，access 
                  modifier)，最后是私有变量。</TD></TR>
              <TR>
                <TD>5</TD>
                <TD>实例变量</TD>
                <TD>首先是公共级别的，随后是保护级别的，再后是包一级别的(没有访问修饰符)，最后是私有级别的。</TD></TR>
              <TR>
                <TD>6</TD>
                <TD>构造器</TD>
                <TD>&nbsp;</TD></TR>
              <TR>
                <TD>7</TD>
                <TD>方法</TD>
                <TD>这些方法应该按功能，而非作用域或访问权限，分组。例如，一个私有的类方法可以置于两个公有的实例方法之间。其目的是为了更便于阅读和理解代码。</TD></TR></TBODY></TABLE></P>
            <P class=middletitle><A name=4>4 缩进排版(Indentation)</P>
            <P>4个空格常被作为缩进排版的一个单位。缩进的确切解释并未详细指定(空格 vs. 
制表符)。一个制表符等于8个空格(而非4个)。</P>
            <P class=middletitle><A name=41>4.1 行长度(Line Length)</P>
            <P>尽量避免一行的长度超过80个字符，因为很多终端和工具不能很好处理之。</P>
            <P>注意：用于文档中的例子应该使用更短的行长，长度一般不超过70个字符。</P>
            <P class=middletitle><A name=42>4.2 换行(Wrapping Lines)</P>
            <P>当一个表达式无法容纳在一行内时，可以依据如下一般规则断开之：</P>
            <P>- 在一个逗号后面断开<BR>- 在一个操作符前面断开<BR>- 
            宁可选择较高级别(higher-level)的断开，而非较低级别(lower-level)的断开<BR>- 
            新的一行应该与上一行同一级别表达式的开头处对齐<BR>- 
            如果以上规则导致你的代码混乱或者使你的代码都堆挤在右边，那就代之以缩进8个空格。 </P>
            <P>以下是断开方法调用的一些例子：</P>
            <P><PRE>  someMethod(longExpression1, longExpression2, longExpression3, 
                   longExpression4, longExpression5);

  var = someMethod1(longExpression1, 
                            someMethod2(longExpression2, 
                                               longExpression3));
	  </PRE>
            <P></P>
            <P>以下是两个断开算术表达式的例子。前者更好，因为断开处位于括号表达式的外边，这是个较高级别的断开。</P>
            <P><PRE>  longName1 = longName2 * (longName3 + longName4 - longName5)
                     + 4 * longname6; //PREFFER

  longName1 = longName2 * (longName3 + longName4 
                                         - longName5) + 4 * longname6; //AVOID
	  </PRE>
            <P></P>
            <P>以下是两个缩进方法声明的例子。前者是常规情形。后者若使用常规的缩进方式将会使第二行和第三行移得很靠右，所以代之以缩进8个空格</P>
            <P><PRE>  //CONVENTIONAL INDENTATION
  someMethod(int anArg, Object anotherArg, String yetAnotherArg, 
                    Object andStillAnother) {
    ...
  }

  //INDENT 8 SPACES TO AVOID VERY DEEP INDENTS
  private static synchronized horkingLongMethodName(int anArg,
          Object anotherArg, String yetAnotherArg,
          Object andStillAnother) {
    ...
  }
	  </PRE>
            <P></P>
            <P>if语句的换行通常使用8个空格的规则，因为常规缩进(4个空格)会使语句体看起来比较费劲。比如：</P>
            <P><PRE>  //DON’T USE THIS INDENTATION
  if ((condition1 &amp;&amp; condition2)
      || (condition3 &amp;&amp; condition4)
      ||!(condition5 &amp;&amp; condition6)) { //BAD WRAPS
      doSomethingAboutIt();             //MAKE THIS LINE EASY TO MISS
  }

  //USE THIS INDENTATION INSTEAD
  if ((condition1 &amp;&amp; condition2)
          || (condition3 &amp;&amp; condition4)
          ||!(condition5 &amp;&amp; condition6)) {
      doSomethingAboutIt();
  }

  //OR USE THIS
  if ((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)
          ||!(condition5 &amp;&amp; condition6)) {
      doSomethingAboutIt();
  }
	  </PRE>
            <P></P>
            <P>这里有三种可行的方法用于处理三元运算表达式：</P>
            <P><PRE>  alpha = (aLongBooleanExpression) ? beta : gamma;

  alpha = (aLongBooleanExpression) ? beta
                                   : gamma;

  alpha = (aLongBooleanExpression)
          ? beta
          : gamma;
	  </PRE>
            <P></P>
            <P class=middletitle><A name=5>5 注释(Comments)</P>
            <P>Java程序有两类注释：实现注释(implementation comments)和文档注释(document 
            comments)。实现注释是那些在C++中见过的，使用/*...*/和//界定的注释。文档注释(被称为"doc 
            comments")是Java独有的，并由/**...*/界定。文档注释可以通过javadoc工具转换成HTML文件。</P>
            <P>实现注释用以注释代码或者实现细节。文档注释从实现自由(implementation-free)的角度描述代码的规范。它可以被那些手头没有源码的开发人员读懂。</P>
            <P>注释应被用来给出代码的总括，并提供代码自身没有提供的附加信息。注释应该仅包含与阅读和理解程序有关的信息。例如，相应的包如何被建立或位于哪个目录下之类的信息不应包括在注释中。</P>
            <P>在注释里，对设计决策中重要的或者不是显而易见的地方进行说明是可以的，但应避免提供代码中己清晰表达出来的重复信息。多余的的注释很容易过时。通常应避免那些代码更新就可能过时的注释。</P>
            <P>注意：频繁的注释有时反映出代码的低质量。当你觉得被迫要加注释的时候，考虑一下重写代码使其更清晰。</P>
            <P>注释不应写在用星号或其他字符画出来的大框里。注释不应包括诸如制表符和回退符之类的特殊字符。</P>
            <P class=middletitle><A name=51>5.1 实现注释的格式(Implementation Comment 
            Formats)</P>
            <P>程序可以有4种实现注释的风格：块(block)、单行(single-line)、尾端(trailing)和行末(end-of-line)。</P>
            <P class=middletitle><A name=511>5.1.1 块注释(Block Comments)</P>
            <P>块注释通常用于提供对文件，方法，数据结构和算法的描述。块注释被置于每个文件的开始处以及每个方法之前。它们也可以被用于其他地方，比如方法内部。在功能和方法内部的块注释应该和它们所描述的代码具有一样的缩进格式。</P>
            <P>块注释之首应该有一个空行，用于把块注释和代码分割开来，比如：</P>
            <P><PRE>  /*
   * Here is a block comment.
   */
	  </PRE>
            <P></P>
            <P>块注释可以以/*-开头，这样indent(1)就可以将之识别为一个代码块的开始，而不会重排它。</P>
            <P><PRE>  /*-
    * Here is a block comment with some very special
    * formatting that I want indent(1) to ignore.
    *
    *    one
    *        two
    *            three
    */
	  </PRE>
            <P></P>
            <P>注意：如果你不使用indent(1)，就不必在代码中使用/*-，或为他人可能对你的代码运行indent(1)作让步。</P>
            <P>参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#52">文档注释</A>"</P>
            <P class=middletitle><A name=512>5.1.2 单行注释(Single-Line 
Comments)</P>
            <P>短注释可以显示在一行内，并与其后的代码具有一样的缩进层级。如果一个注释不能在一行内写完，就该采用块注释(参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#511">块注释</A>")。单行注释之前应该有一个空行。以下是一个Java代码中单行注释的例子：</P>
            <P><PRE>  if (condition) {

    /* Handle the condition. */
    ...
  }
	  </PRE>
            <P></P>
            <P class=middletitle><A name=513>5.1.3 尾端注释(Trailing Comments)</P>
            <P>极短的注释可以与它们所要描述的代码位于同一行，但是应该有足够的空白来分开代码和注释。若有多个短注释出现于大段代码中，它们应该具有相同的缩进。</P>
            <P>以下是一个Java代码中尾端注释的例子：</P>
            <P><PRE>  if (a == 2) {
      return TRUE;              /* special case */
  } else {
      return isPrime(a);         /* works only for odd a */
  }
	  </PRE>
            <P></P>
            <P class=middletitle><A name=514>5.1.4 行末注释(End-Of-Line 
Comments)</P>
            <P>注释界定符"//"，可以注释掉整行或者一行中的一部分。它一般不用于连续多行的注释文本；然而，它可以用来注释掉连续多行的代码段。以下是所有三种风格的例子：</P>
            <P><PRE>  if (foo &gt; 1) {

      // Do a double-flip.
      ...
  }
  else {
      return false;          // Explain why here.
  }

  //if (bar &gt; 1) {
  //
  //    // Do a triple-flip.
  //    ...
  //}
  //else {
  //    return false;
  //}
	  </PRE>
            <P></P>
            <P class=middletitle><A name=52>5.2 文档注释(Documentation Comments)</P>
            <P>注意：此处描述的注释格式之范例，参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#b1">Java源文件范例</A>"</P>
            <P>若想了解更多，参见"How to Write Doc Comments for 
            Javadoc"，其中包含了有关文档注释标记的信息(@return, @param, @see)：</P>
            <P><A 
            href="http://java.sun.com/javadoc/writingdoccomments/index.html">http://java.sun.com/javadoc/writingdoccomments/index.html</A></P>
            <P>若想了解更多有关文档注释和javadoc的详细资料，参见javadoc的主页：</P>
            <P><A 
            href="http://java.sun.com/javadoc/index.html">http://java.sun.com/javadoc/index.html</A></P>
            <P>文档注释描述Java的类、接口、构造器，方法，以及字段(field)。每个文档注释都会被置于注释定界符/**...*/之中，一个注释对应一个类、接口或成员。该注释应位于声明之前：</P>
            <P><PRE>  /**
    * The Example class provides ...
    */
  public class Example { ...
	  </PRE>
            <P></P>
            <P>注意顶层(top-level)的类和接口是不缩进的，而其成员是缩进的。描述类和接口的文档注释的第一行(/**)不需缩进；随后的文档注释每行都缩进1格(使星号纵向对齐)。成员，包括构造函数在内，其文档注释的第一行缩进4格，随后每行都缩进5格。</P>
            <P>若你想给出有关类、接口、变量或方法的信息，而这些信息又不适合写在文档中，则可使用实现块注释(见5.1.1)或紧跟在声明后面的单行注释(见5.1.2)。例如，有关一个类实现的细节，应放入紧跟在类声明后面的实现块注释中，而不是放在文档注释中。</P>
            <P>文档注释不能放在一个方法或构造器的定义块中，因为Java会将位于文档注释之后的第一个声明与其相关联。</P>
            <P class=middletitle><A name=6>6 声明(Declarations)</P>
            <P class=middletitle><A name=61>6.1 每行声明变量的数量(Number Per Line)</P>
            <P>推荐一行一个声明，因为这样以利于写注释。亦即，</P>
            <P><PRE>  int level;  // indentation level
  int size;   // size of table
	  </PRE>
            <P></P>
            <P>要优于，</P>
            <P>int level, size; </P>
            <P>不要将不同类型变量的声明放在同一行，例如：</P>
            <P><PRE>  int foo,  fooarray[];   //WRONG!
	  </PRE>
            <P></P>
            <P>注意：上面的例子中，在类型和标识符之间放了一个空格，另一种被允许的替代方式是使用制表符：</P>
            <P><PRE>  int		level;         // indentation level
  int		size;          // size of table
  Object	currentEntry;  // currently selected table entry
	  </PRE>
            <P></P>
            <P class=middletitle><A name=62>6.2 初始化(Initialization)</P>
            <P>尽量在声明局部变量的同时初始化。唯一不这么做的理由是变量的初始值依赖于某些先前发生的计算。</P>
            <P class=middletitle><A name=63>6.3 布局(Placement)</P>
            <P>只在代码块的开始处声明变量。（一个块是指任何被包含在大括号"{"和"}"中间的代码。）不要在首次用到该变量时才声明之。这会把注意力不集中的程序员搞糊涂，同时会妨碍代码在该作用域内的可移植性。</P>
            <P><PRE>  void myMethod() {
      int int1 = 0;         // beginning of method block

      if (condition) {
          int int2 = 0;     // beginning of "if" block
          ...
      }
  }
	  </PRE>
            <P></P>
            <P>该规则的一个例外是for循环的索引变量</P>
            <P><PRE>  for (int i = 0; i &lt; maxLoops; i++) { ... }
	  </PRE>
            <P></P>
            <P>避免声明的局部变量覆盖上一级声明的变量。例如，不要在内部代码块中声明相同的变量名：</P>
            <P><PRE>  int count;
  ...
  myMethod() {
      if (condition) {
          int count = 0;     // AVOID!
          ...
      }
      ...
  }
	  </PRE>
            <P></P>
            <P class=middletitle><A name=64>6.4 类和接口的声明(Class and Interface 
            Declarations)</P>
            <P>当编写类和接口是，应该遵守以下格式规则：</P>
            <P>- 在方法名与其参数列表之前的左括号"("间不要有空格<BR>- 左大括号"{"位于声明语句同行的末尾<BR>- 
            右大括号"}"另起一行，与相应的声明语句对齐，除非是一个空语句，"}"应紧跟在"{"之后 <PRE>  class Sample extends Object {
      int ivar1;
      int ivar2;

      Sample(int i, int j) {
          ivar1 = i;
          ivar2 = j;
      }

      int emptyMethod() {}

      ...
  }
	  </PRE>- 方法与方法之间以空行分隔
            <P></P>
            <P class=middletitle><A name=7>7 语句(Statements)</P>
            <P class=middletitle><A name=71>7.1 简单语句(Simple Statements)</P>
            <P>每行至多包含一条语句，例如：</P>
            <P><PRE>  argv++;       // Correct
  argc--;       // Correct
  argv++; argc--;       // AVOID!
	  </PRE>
            <P></P>
            <P class=middletitle><A name=72>7.2 复合语句(Compound Statements)</P>
            <P>复合语句是包含在大括号中的语句序列，形如"{ 语句 }"。例如下面各段。</P>
            <P>- 被括其中的语句应该较之复合语句缩进一个层次<BR>- 
            左大括号"{"应位于复合语句起始行的行尾；右大括号"}"应另起一行并与复合语句首行对齐。<BR>- 
            大括号可以被用于所有语句，包括单个语句，只要这些语句是诸如if-else或for控制结构的一部分。这样便于添加语句而无需担心由于忘了加括号而引入bug。 
            </P>
            <P class=middletitle><A name=73>7.3 返回语句(return Statements)</P>
            <P>一个带返回值的return语句不使用小括号"()"，除非它们以某种方式使返回值更为显见。例如：</P>
            <P><PRE>  return;

  return myDisk.size();

  return (size ? size : defaultSize);
	  </PRE>
            <P></P>
            <P class=middletitle><A name=74>7.4 if，if-else，if else-if else语句(if, 
            if-else, if else-if else Statements)</P>
            <P>if-else语句应该具有如下格式：</P>
            <P><PRE>  if (condition) {
      statements;
  }

  if (condition) {
      statements;
  } else {
      statements;
  }

  if (condition) {
      statements;
  } else if (condition) {
      statements;
  } else{
      statements;
  }
	  </PRE>
            <P></P>
            <P>注意：if语句总是用"{"和"}"括起来，避免使用如下容易引起错误的格式：</P>
            <P><PRE>  if (condition) //AVOID! THIS OMITS THE BRACES {}!
      statement;
	  </PRE>
            <P></P>
            <P class=middletitle><A name=75>7.5 for语句(for Statements)</P>
            <P>一个for语句应该具有如下格式：</P>
            <P><PRE>  for (initialization; condition; update) {
      statements;
  }
	  </PRE>
            <P></P>
            <P>一个空的for语句(所有工作都在初始化，条件判断，更新子句中完成）应该具有如下格式：</P>
            <P><PRE>  for (initialization; condition; update);
	  </PRE>
            <P></P>
            <P>当在for语句的初始化或更新子句中使用逗号时，避免因使用三个以上变量，而导致复杂度提高。若需要，可以在for循环之前(为初始化子句)或for循环末尾(为更新子句)使用单独的语句。</P>
            <P class=middletitle><A name=76>7.6 while语句(while Statements)</P>
            <P>一个while语句应该具有如下格式</P>
            <P><PRE>  while (condition) {
      statements;
  }
	  </PRE>
            <P></P>
            <P>一个空的while语句应该具有如下格式：</P>
            <P><PRE>  while (condition);
	  </PRE>
            <P></P>
            <P class=middletitle><A name=77>7.7 do-while语句(do-while 
            Statements)</P>
            <P>一个do-while语句应该具有如下格式：</P>
            <P><PRE>  do {
      statements;
  } while (condition);
	  </PRE>
            <P></P>
            <P class=middletitle><A name=78>7.8 switch语句(switch Statements)</P>
            <P>一个switch语句应该具有如下格式：</P>
            <P><PRE>  switch (condition) {
  case ABC:
      statements;
      /* falls through */
  case DEF:
      statements;
      break;

  case XYZ:
      statements;
      break;

  default:
      statements;
      break;
  }
	  </PRE>
            <P></P>
            <P>每当一个case顺着往下执行时(因为没有break语句)，通常应在break语句的位置添加注释。上面的示例代码中就包含注释/* 
            falls through */。</P>
            <P class=middletitle><A name=79>7.9 try-catch语句(try-catch 
            Statements)</P>
            <P>一个try-catch语句应该具有如下格式：</P>
            <P><PRE>  try {
      statements;
  } catch (ExceptionClass e) {
      statements;
  }
	  </PRE>
            <P></P>
            <P>一个try-catch语句后面也可能跟着一个finally语句，不论try代码块是否顺利执行完，它都会被执行。</P>
            <P><PRE>  try {
      statements;
  } catch (ExceptionClass e) {
      statements;
  } finally {
      statements;
  }
	  </PRE>
            <P></P>
            <P class=middletitle><A name=8>8 空白(White Space)</P>
            <P class=middletitle><A name=81>8.1 空行(Blank Lines)</P>
            <P>空行将逻辑相关的代码段分隔开，以提高可读性。</P>
            <P>下列情况应该总是使用两个空行：</P>
            <P>- 一个源文件的两个片段(section)之间<BR>- 类声明和接口声明之间 </P>
            <P>下列情况应该总是使用一个空行：</P>
            <P>- 两个方法之间<BR>- 方法内的局部变量和方法的第一条语句之间<BR>- 块注释（参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#511">5.1.1</A>"）或单行注释（参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#512">5.1.2</A>"）之前<BR>- 
            一个方法内的两个逻辑段之间，用以提高可读性 </P>
            <P class=middletitle><A name=82>8.2 空格(Blank Spaces)</P>
            <P>下列情况应该使用空格：</P>
            <P>- 一个紧跟着括号的关键字应该被空格分开，例如：<BR><PRE>  while (true) {
      ...
  }
	  </PRE>注意：空格不应该置于方法名与其左括号之间。这将有助于区分关键字和方法调用。<BR>- 
            空白应该位于参数列表中逗号的后面<BR>- 
            所有的二元运算符，除了"."，应该使用空格将之与操作数分开。一元操作符和操作数之间不因该加空格，比如：负号("-")、自增("++")和自减("--")。例如： 
<PRE>    a += c + d;
    a = (a + b) / (c * d);

    while (d++ = s++) {
        n++;
    }
    printSize("size is " + foo + "\n");
	  </PRE>- for语句中的表达式应该被空格分开，例如： <PRE>    for (expr1; expr2; expr3)
	  </PRE>- 强制转型后应该跟一个空格，例如： <PRE>    myMethod((byte) aNum, (Object) x);
    myMethod((int) (cp + 5), ((int) (i + 3)) + 1);
	  </PRE>
            <P></P>
            <P class=middletitle><A name=9>9 命名规范(Naming Conventions)</P>
            <P>命名规范使程序更易读，从而更易于理解。它们也可以提供一些有关标识符功能的信息，以助于理解代码，例如，不论它是一个常量，包，还是类。</P>
            <P>
            <TABLE border=1>
              <TBODY>
              <TR>
                <TD>标识符类型</TD>
                <TD>命名规则</TD>
                <TD>例子</TD></TR>
              <TR>
                <TD>包(Packages)</TD>
                <TD>一个唯一包名的前缀总是全部小写的ASCII字母并且是一个顶级域名，通常是com，edu，gov，mil，net，org，或1981年ISO 
                  3166标准所指定的标识国家的英文双字符代码。包名的后续部分根据不同机构各自内部的命名规范而不尽相同。这类命名规范可能以特定目录名的组成来区分部门(department)，项目(project)，机器(machine)，或注册名(login 
                  names)。</TD>
                <TD>com.sun.eng<BR>com.apple.quicktime.v2<BR>edu.cmu.cs.bovik.cheese</TD></TR>
              <TR>
                <TD>类(Classes)</TD>
                <TD>命名规则：类名是个一名词，采用大小写混合的方式，每个单词的首字母大写。尽量使你的类名简洁而富于描述。使用完整单词，避免缩写词(除非该缩写词被更广泛使用，像URL，HTML)</TD>
                <TD>class Raster;<BR>class ImageSprite;</TD></TR>
              <TR>
                <TD>接口(Interfaces)</TD>
                <TD>命名规则：大小写规则与类名相似</TD>
                <TD>interface RasterDelegate;<BR>interface Storing;</TD></TR>
              <TR>
                <TD>方法(Methods)</TD>
                <TD>方法名是一个动词，采用大小写混合的方式，第一个单词的首字母小写，其后单词的首字母大写。</TD>
                <TD>run();<BR>runFast();<BR>getBackground();</TD></TR>
              <TR>
                <TD>变量(Variables)</TD>
                <TD>除了变量名外，所有实例，包括类，类常量，均采用大小写混合的方式，第一个单词的首字母小写，其后单词的首字母大写。变量名不应以下划线或美元符号开头，尽管这在语法上是允许的。<BR>变量名应简短且富于描述。变量名的选用应该易于记忆，即，能够指出其用途。尽量避免单个字符的变量名，除非是一次性的临时变量。临时变量通常被取名为i，j，k，m和n，它们一般用于整型；c，d，e，它们一般用于字符型。</TD>
                <TD>char c;<BR>int i;<BR>float myWidth;</TD></TR>
              <TR>
                <TD>实例变量(Instance Variables)</TD>
                <TD>大小写规则和变量名相似，除了前面需要一个下划线</TD>
                <TD>int _employeeId;<BR>String _name;<BR>Customer 
              _customer;</TD></TR>
              <TR>
                <TD>常量(Constants)</TD>
                <TD>类常量和ANSI常量的声明，应该全部大写，单词间用下划线隔开。(尽量避免ANSI常量，容易引起错误)</TD>
                <TD>static final int MIN_WIDTH = 4;<BR>static final int 
                  MAX_WIDTH = 999;<BR>static final int GET_THE_CPU = 
              1;</TD></TR></TBODY></TABLE></P>
            <P class=middletitle><A name=a>10 编程惯例(Programming Practices)</P>
            <P class=middletitle><A name=a1>10.1 提供对实例以及类变量的访问控制(Providing 
            Access to Instance and Class Variables)</P>
            <P>若没有足够理由，不要把实例或类变量声明为公有。通常，实例变量无需显式的设置(set)和获取(gotten)，通常这作为方法调用的边缘效应 
            (side effect)而产生。</P>
            <P>一个具有公有实例变量的恰当例子，是类仅作为数据结构，没有行为。亦即，若你要使用一个结构(struct)而非一个类(如果java支持结构的话)，那么把类的实例变量声明为公有是合适的。</P>
            <P class=middletitle><A name=a2>10.2 引用类变量和类方法(Referring to Class 
            Variables and Methods)</P>
            <P>避免用一个对象访问一个类的静态变量和方法。应该用类名替代。例如：</P>
            <P><PRE>  classMethod();             //OK
  AClass.classMethod();      //OK
  anObject.classMethod();    //AVOID!
	  </PRE>
            <P></P>
            <P class=middletitle><A name=a3>10.3 常量(Constants)</P>
            <P>位于for循环中作为计数器值的数字常量，除了-1,0和1之外，不应被直接写入代码。</P>
            <P class=middletitle><A name=a4>10.4 变量赋值(Variable Assignments)</P>
            <P>避免在一个语句中给多个变量赋相同的值。它很难读懂。例如：</P>
            <P><PRE>  fooBar.fChar = barFoo.lchar = 'c'; // AVOID!
	  </PRE>
            <P></P>
            <P>不要将赋值运算符用在容易与相等关系运算符混淆的地方。例如：</P>
            <P><PRE>  if (c++ = d++) {        // AVOID! (Java disallows)
      ...
  }
	  </PRE>
            <P></P>
            <P>应该写成</P>
            <P><PRE>  if ((c++ = d++) != 0) {
    ...
  }
	  </PRE>
            <P></P>
            <P>不要使用内嵌(embedded)赋值运算符试图提高运行时的效率，这是编译器的工作。例如：</P>
            <P><PRE>  d = (a = b + c) + r;        // AVOID!
	  </PRE>
            <P></P>
            <P>应该写成</P>
            <P><PRE>  a = b + c;
  d = a + r;
	  </PRE>
            <P></P>
            <P class=middletitle><A name=a5>10.5 其它惯例(Miscellaneous 
            Practices)</P>
            <P class=middletitle><A name=a51>10.5.1 圆括号(Parentheses)</P>
            <P>一般而言，在含有多种运算符的表达式中使用圆括号来避免运算符优先级问题，是个好方法。即使运算符的优先级对你而言可能很清楚，但对其他人未必如此。你不能假设别的程序员和你一样清楚运算符的优先级。</P>
            <P><PRE>  if (a == b &amp;&amp; c == d)     // AVOID!
  if ((a == b) &amp;&amp; (c == d))  // RIGHT
	  </PRE>
            <P></P>
            <P class=middletitle><A name=a52>10.5.2 返回值(Returning Values)</P>
            <P>设法让你的程序结构符合目的。例如：</P>
            <P><PRE>  if (booleanExpression) {
      return true;
  } else {
      return false;
  }
	  </PRE>
            <P></P>
            <P>应该代之以如下方法：</P>
            <P><PRE>  return booleanExpression;
	  </PRE>
            <P></P>
            <P>类似地：</P>
            <P><PRE>  if (condition) {
      return x;
  }
  return y;
	  </PRE>
            <P></P>
            <P>应该写做：</P>
            <P><PRE>  return (condition ? x : y);
	  </PRE>
            <P></P>
            <P class=middletitle><A name=a53>10.5.3 条件运算符"?"前的表达式(Expressions 
            before '?' in the Conditional Operator)</P>
            <P>如果一个包含二元运算符的表达式出现在三元运算符" ? : "的"?"之前，那么应该给表达式添上一对圆括号。例如：</P>
            <P><PRE>  (x &gt;= 0) ? x : -x;
	  </PRE>
            <P></P>
            <P class=middletitle><A name=a54>10.5.4 特殊注释(Special Comments)</P>
            <P>在注释中使用XXX来标识某些未实现(bogus)的但可以工作(works)的内容。用FIXME来标识某些假的和错误的内容。</P>
            <P class=middletitle><A name=b>11 代码范例(Code Examples)</P>
            <P class=middletitle><A name=b1>11.1 Java源文件范例(Java Source File 
            Example)</P>
            <P>下面的例子，展示了如何合理布局一个包含单一公共类的Java源程序。接口的布局与其相似。更多信息参见"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#313">类和接口声明</A>"以及"<A 
            href="http://www.huihoo.org/code/java_code_conventions.html#52">文挡注释</A>"。</P>
            <P><PRE>/*
 * @(#)Blah.java        1.82 99/03/18
 *
 * Copyright (c) 1994-1999 Sun Microsystems, Inc.
 * 901 San Antonio Road, Palo Alto, California, 94303, U.S.A.
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of Sun
 * Microsystems, Inc. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Sun.
 */


package java.blah;

import java.blah.blahdy.BlahBlah;

/**
 * Class description goes here.
 *
 * @version 	1.82 18 Mar 1999
 * @author 	Firstname Lastname
 */
public class Blah extends SomeClass {
    /* A class implementation comment can go here. */

    /** classVar1 documentation comment */
    public static int classVar1;

    /**
     * classVar2 documentation comment that happens to be
     * more than one line long
     */
    private static Object classVar2;

    /** instanceVar1 documentation comment */
    public Object instanceVar1;

    /** instanceVar2 documentation comment */
    protected int instanceVar2;

    /** instanceVar3 documentation comment */
    private Object[] instanceVar3;

    /**
     * ...constructor Blah documentation comment...
     */
    public Blah() {
        // ...implementation goes here...
    }

    /**
     * ...method doSomething documentation comment...
     */
    public void doSomething() {
        // ...implementation goes here...
    }

    /**
     * ...method doSomethingElse documentation comment...
     * @param someParam description
     */
    public void doSomethingElse(Object someParam) {
        // ...implementation goes here...
    }
}
	  </PRE>
            <P></P></TD>
          <TD width="10%"></TD></TR></TBODY></TABLE>
      <HR SIZE=1 width="98%" noShade>
<!--开始底部-->
      <SCRIPT language=javascript 
      src="Java语言编码规范(Java%20Code%20Conventions)_files/bottom.js"></SCRIPT>
<!--结束底部--></H4></TR></TBODY></TABLE></BODY></HTML>
